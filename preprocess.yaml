name: Preprocess Server Machine Dataset
description: Preprocesses the SMD dataset to compute basic statistics and anomaly distribution, outputs results as JSON.
inputs:
  - name: smd_data
    type: Dataset
outputs:
  - name: stats_out
    type: String
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pandas numpy || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pandas numpy --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        import pandas as pd
        import numpy as np
        import json

        def analyze_smd(df):
            stats = {}
            stats["num_rows"] = len(df)
            stats["num_columns"] = df.shape[1]

            # Basic statistics
            stats["feature_means"] = df.mean().to_dict()
            stats["feature_stds"] = df.std().to_dict()

            # If dataset has anomaly labels, assume last column = label
            if "label" in df.columns or df.columns[-1].lower() in ["label", "labels"]:
                label_col = "label" if "label" in df.columns else df.columns[-1]
                label_counts = df[label_col].value_counts().to_dict()
                stats["label_distribution"] = label_counts
            else:
                stats["label_distribution"] = {}

            return stats

        parser = argparse.ArgumentParser()
        parser.add_argument('--smd_data', type=str, required=True)
        parser.add_argument('--stats_out', type=str, required=True)

        args = parser.parse_args()

        print(f"Input path: {args.smd_data}")
        print(f"Output path: {args.stats_out}")

        # Load dataset (pickle of pandas DataFrame)
        try:
            with open(args.smd_data, "rb") as f:
                df = pickle.load(f)
            print(f"Successfully loaded dataset with shape {df.shape}")
        except Exception as e:
            print(f"Error loading dataset: {e}")
            import traceback
            traceback.print_exc()
            exit(1)

        # Ensure output directory exists
        os.makedirs(os.path.dirname(args.stats_out), exist_ok=True)

        # Analyze dataset
        try:
            stats_dict = analyze_smd(df)

            # Save stats to JSON
            with open(args.stats_out, 'w') as f:
                json.dump(stats_dict, f, indent=2)

            print(f"[SUCCESS] Saved dataset statistics to {args.stats_out}")
            print(f"Stats: {stats_dict}")

        except Exception as e:
            print(f"Error during preprocessing: {e}")
            import traceback
            traceback.print_exc()
            exit(1)

    args:
      - --smd_data
      - {inputPath: smd_data}
      - --stats_out
      - {outputPath: stats_out}
