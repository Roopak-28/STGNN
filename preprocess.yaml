name: Preprocess Server Machine Dataset
description: Preprocesses dataset from load_dataset brick and prepares output paths for training, testing, and anomaly detection.

inputs:
  - name: raw_dataset_pth
    type: String
    description: Path to raw dataset output from load_dataset brick.
  - name: output_dir
    type: String
    description: Directory to store processed datasets.
    default: ./output/
  - name: train_pth
    type: String
    description: Path to save processed training set.
    default: ./output/train.csv
  - name: test_pth
    type: String
    description: Path to save processed testing set.
    default: ./output/test.csv
  - name: anomaly_pth
    type: String
    description: Path to save processed anomaly set.
    default: ./output/anomaly.csv

outputs:
  - name: train_out
    type: String
    description: Processed training dataset path.
  - name: test_out
    type: String
    description: Processed testing dataset path.
  - name: anomaly_out
    type: String
    description: Processed anomaly dataset path.

implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        set -e
        echo "Installing dependencies..."
        pip install --no-cache-dir pandas numpy

        echo "Running preprocessing..."
        python3 - <<'EOF'
        import pandas as pd
        import sys
        import os

        raw_dataset_pth = sys.argv[1]
        output_dir = sys.argv[2]
        train_pth = sys.argv[3]
        test_pth = sys.argv[4]
        anomaly_pth = sys.argv[5]

        os.makedirs(output_dir, exist_ok=True)

        df = pd.read_csv(raw_dataset_pth)

        # Example split (replace with actual logic)
        train_df = df.sample(frac=0.7, random_state=42)
        test_df = df.drop(train_df.index)
        anomaly_df = df[df['label'] == 'anomaly'] if 'label' in df.columns else pd.DataFrame()

        train_df.to_csv(train_pth, index=False)
        test_df.to_csv(test_pth, index=False)
        anomaly_df.to_csv(anomaly_pth, index=False)

        print(f"train_out={train_pth}")
        print(f"test_out={test_pth}")
        print(f"anomaly_out={anomaly_pth}")
        EOF
    args:
      - { inputValue: raw_dataset_pth }
      - { inputValue: output_dir }
      - { inputValue: train_pth }
      - { inputValue: test_pth }
      - { inputValue: anomaly_pth }
