name: Load Server Machine Dataset
description: Loads the SMD dataset and saves train, test, and anomaly CSVs.

outputs:
  - name: train_csv
    type: Path
  - name: test_csv
    type: Path
  - name: anomaly_csv
    type: Path

implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        set -e
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pandas numpy git --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pandas as pd

        parser = argparse.ArgumentParser()
        parser.add_argument('--train_csv', type=str, required=True)
        parser.add_argument('--test_csv', type=str, required=True)
        parser.add_argument('--anomaly_csv', type=str, required=True)
        args = parser.parse_args()

        # Clone OmniAnomaly repo if not exists
        if not os.path.exists("/tmp/omni"):
            os.system("git clone https://github.com/NetManAIOps/OmniAnomaly /tmp/omni")

        dataset_path = "/tmp/omni/data/SMD/train"
        csv_files = [os.path.join(dataset_path, f) for f in os.listdir(dataset_path) if f.endswith(".csv") or f.endswith(".txt")]
        if not csv_files:
            raise FileNotFoundError(f"No CSV/TXT files found in {dataset_path}")

        df_list = [pd.read_csv(f, header=None) for f in sorted(csv_files)]
        df = pd.concat(df_list, ignore_index=True)

        # Example split: train/test/anomaly
        train_df = df.sample(frac=0.7, random_state=42)
        test_df = df.drop(train_df.index)
        anomaly_df = df[df.iloc[:, -1] == 1] if df.shape[1] > 1 else pd.DataFrame()

        # Ensure directories exist
        os.makedirs(os.path.dirname(args.train_csv), exist_ok=True)
        os.makedirs(os.path.dirname(args.test_csv), exist_ok=True)
        os.makedirs(os.path.dirname(args.anomaly_csv), exist_ok=True)

        # Save CSV files
        train_df.to_csv(args.train_csv, index=False)
        test_df.to_csv(args.test_csv, index=False)
        anomaly_df.to_csv(args.anomaly_csv, index=False)

        print(f"[SUCCESS] Train CSV: {args.train_csv}")
        print(f"[SUCCESS] Test CSV: {args.test_csv}")
        print(f"[SUCCESS] Anomaly CSV: {args.anomaly_csv}")

    args:
      - --train_csv
      - {outputPath: train_csv}
      - --test_csv
      - {outputPath: test_csv}
      - --anomaly_csv
      - {outputPath: anomaly_csv}
