name: Load Server Machine Dataset
description: Downloads the Server Machine Dataset (SMD) and saves only the paths to train, test, and anomaly label directories.

outputs:
  - {name: train_csv, type: Path, description: Path string to training dataset directory.}
  - {name: test_csv, type: Path, description: Path string to testing dataset directory.}
  - {name: labels_csv, type: Path, description: Path string to anomaly labels directory.}

implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, os, sys

        parser = argparse.ArgumentParser()
        parser.add_argument("--train_csv", type=str, required=True)
        parser.add_argument("--test_csv", type=str, required=True)
        parser.add_argument("--labels_csv", type=str, required=True)
        args = parser.parse_args()

        print("[INFO] Downloading Server Machine Dataset (SMD) from OmniAnomaly GitHub...")
        os.system("git clone https://github.com/NetManAIOps/OmniAnomaly /tmp/omni")

        train_path = "/tmp/omni/data/SMD/train"
        test_path = "/tmp/omni/data/SMD/test"
        labels_path = "/tmp/omni/data/SMD/test_label"

        print(f"[SUCCESS] Train path: {train_path}")
        print(f"[SUCCESS] Test path: {test_path}")
        print(f"[SUCCESS] Labels path: {labels_path}")

        # Ensure output dirs exist
        os.makedirs(os.path.dirname(args.train_csv), exist_ok=True)
        os.makedirs(os.path.dirname(args.test_csv), exist_ok=True)
        os.makedirs(os.path.dirname(args.labels_csv), exist_ok=True)

        # Write the paths into files (so downstream bricks can read them)
        with open(args.train_csv, "w") as f: f.write(train_path)
        with open(args.test_csv, "w") as f: f.write(test_path)
        with open(args.labels_csv, "w") as f: f.write(labels_path)

        print(f"[SUCCESS] Wrote output paths to: {args.train_csv}, {args.test_csv}, {args.labels_csv}")
    args:
      - --train_csv
      - {outputPath: train_csv}
      - --test_csv
      - {outputPath: test_csv}
      - --labels_csv
      - {outputPath: labels_csv}
